name: Android Release Build and Upload to Play Alpha

on:
  push:
    tags:
      - 'UPAv*' # 태그가 'UPAv'로 시작하는 경우에만 워크플로우 실행됨 (예: UPAv1.0.4)

jobs:
  build:
    name: Build Release AAB and Upload to Google Play Alpha
    runs-on: ubuntu-latest

    steps:
    # 리포지토리의 코드를 체크아웃 (다운로드)
      - name: Checkout code
        uses: actions/checkout@v3

    # JDK 17 설치 (Android 빌드 도구 사용을 위해 필요)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

    # keystore 파일 디코딩 (base64 → 바이너리) 후 저장, 앱 서명에 사용됨
      - name: Decode keystore.jks
        run: |
          mkdir -p app/jks
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 -d > app/jks/saveurlkey.jks

    # Firebase 연동을 위한 google-services.json 파일 디코딩 및 저장
      - name: Decode google-services.json
        run: |
          mkdir -p app
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 -d > app/google-services.json

    # gradlew 스크립트 실행 권한 부여 (gradle 빌드 도구 실행을 위함)
      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

    # local.properties 파일 생성 (AdMob API 키 포함)
      - name: Create local.properties
        run: |
          echo "ADS_ID=${{ secrets.ADMOB_APP_ID }}" >> ./local.properties
          echo "ADS_FIXED_SIZE_BANNER_UNIT_ID=${{ secrets.ADMOB_UNIT_ID }}" >> ./local.properties

    # Release AAB 빌드 (앱 번들 생성), keystore 정보는 환경변수로 전달
      - name: Build Release AAB
        env:
          KEYSTORE_PASSWORD: ${{ secrets.RELEASE_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.RELEASE_KEYSTORE_ALIAS }}
          KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: ./gradlew clean bundleRelease

    # Play Console 배포를 위한 서비스 계정 JSON 파일 디코딩 및 저장
      - name: Decode Play Store Service Account
        run: |
          echo "${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}" | base64 -d > service-account.json

    # build.gradle에서 versionName 추출하여 GitHub Actions 변수로 저장 (예: v1.0.4)
      - name: Extract versionName from build.gradle
        id: version
        run: |
          VERSION_NAME=$(grep versionName app/build.gradle | head -n 1 | sed -E 's/.*"([^"]+)".*/\1/')
          echo "name=v$VERSION_NAME" >> "$GITHUB_OUTPUT"

    # Google Play 콘솔의 Alpha 트랙으로 AAB 업로드 (릴리스 노트 포함, draft 상태로 업로드됨)
      - name: Upload AAB to Google Play (Alpha Track)
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: service-account.json                         # 인증용 서비스 계정 JSON
          packageName: com.jinscompany.saveurl                             # 앱의 패키지 이름
          releaseFiles: app/build/outputs/bundle/release/app-release.aab   # 업로드할 AAB 파일 경로
          whatsNewDirectory: distribution/whatsnew                             # 릴리스 노트 경로
          releaseName: ${{ steps.version.outputs.name }}                   # versionName 기반 릴리스 이름 (예: v1.0.4)
          track: alpha                                                     # 배포 트랙 (alpha)
          status: completed                                                    # 배포 상태 (completed - 자동 배포,  draft - 임시 저장, 직접 승인 필요, inProgress - 점진적 배포 userFraction: 0.2  # 20% 사용자에게만 배포 )
